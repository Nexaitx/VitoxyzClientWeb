import{a as p}from"./chunk-OTHMNLYJ.js";import{w as m}from"./chunk-QI76QBAE.js";import{Z as n,a as l,b as u,ba as h,ga as f,l as c,p as s}from"./chunk-VVX2ZSCF.js";var g=class i{_notification$=new c(null);notification$=this._notification$.asObservable();showSuccess(t,e=3e3){this._notification$.next({message:t,type:"success",duration:e}),setTimeout(()=>this.clear(),e)}showError(t,e=5e3){this._notification$.next({message:t,type:"error",duration:e}),setTimeout(()=>this.clear(),e)}clear(){this._notification$.next(null)}static \u0275fac=function(e){return new(e||i)};static \u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"})};var y=class i{http=f(m);API_BASE=`${p}/cart`;_cart$=new c([]);cart$=this._cart$.asObservable();_loading$=new c(!1);loading$=this._loading$.asObservable();_itemLoadingStates$=new c({});itemLoadingStates$=this._itemLoadingStates$.asObservable();_successNotification$=new c(null);successNotification$=this._successNotification$.asObservable();notificationService=f(g);LOCAL_STORAGE_KEY="localCart";constructor(){this.loadLocalCart()}setItemLoading(t,e){let o=this._itemLoadingStates$.value;if(e)this._itemLoadingStates$.next(u(l({},o),{[t]:!0}));else{let a=l({},o);delete a[t],this._itemLoadingStates$.next(a)}}setLoading(t){this._loading$.next(t)}showSuccessNotification(t){this._successNotification$.next(t),setTimeout(()=>{this._successNotification$.next(null)},3e3)}loadLocalCart(){let t=localStorage.getItem(this.LOCAL_STORAGE_KEY);if(t){let e=JSON.parse(t);console.log("\u{1F6D2} Loading local cart from storage:",e),this._cart$.next(e)}else console.log("\u{1F6D2} No local cart found in storage")}saveLocalCart(t){console.log("\u{1F4BE} Saving cart to local storage:",t),localStorage.setItem(this.LOCAL_STORAGE_KEY,JSON.stringify(t)),this._cart$.next(t)}addToLocalCart(t){console.log("\u2795 Adding to local cart:",t);let e=this._cart$.value,o=e.findIndex(r=>r.id===t.id),a;o>-1?(a=[...e],a[o]=u(l({},a[o]),{count:a[o].count+(t.count||1)})):a=[...e,u(l({},t),{count:t.count||1})],this.saveLocalCart(a)}removeFromLocalCart(t){console.log("\u{1F5D1}\uFE0F Removing from local cart:",t);let o=this._cart$.value.filter(a=>a.id!==t);this.saveLocalCart(o)}updateLocalCartQuantity(t,e){console.log("\u{1F4DD} Updating local cart quantity:",t,e);let a=this._cart$.value.map(r=>r.id===t?u(l({},r),{count:e}):r);this.saveLocalCart(a)}syncLocalCartToBackend(){let t=this._cart$.value,e=localStorage.getItem("authToken");if(console.log("\u{1F504} Starting cart sync..."),console.log("\u{1F511} Token exists:",!!e),console.log("\u{1F6D2} Local cart items to sync:",t),!e)return console.log("\u274C No token found, skipping sync"),this.showSuccessNotification("Please login to sync your cart"),s({success:!1,message:"No authentication token"});if(t.length===0)return console.log("\u2139\uFE0F Local cart is empty, skipping sync"),s({success:!0,message:"Empty cart"});this.setLoading(!0);let o=t.map(a=>({medicineId:a.id,quantity:a.count,productType:a.productType||"otc"}));return console.log("\u{1F4E4} Syncing items to backend via bulk API:",o),this.http.post(`${this.API_BASE}/sync-local`,{items:o},{headers:{Authorization:`Bearer ${e}`}}).pipe(n({next:a=>{console.log("\u2705 Sync API response:",a),this.setLoading(!1),a.status?(console.log("\u{1F3AF} Sync successful, clearing local cart"),this.showSuccessNotification("Cart synced successfully!"),localStorage.removeItem(this.LOCAL_STORAGE_KEY),console.log("\u{1F5D1}\uFE0F Local cart cleared from storage"),setTimeout(()=>{this.fetchCartFromBackend().subscribe()},1e3)):(console.error("\u274C Sync failed in API response:",a.message),this.showSuccessNotification("Cart sync failed. Using local cart."))},error:a=>{console.error("\u274C Sync API error:",a),this.setLoading(!1),this.showSuccessNotification("Cart sync failed. Using local cart.")}}))}fetchCartFromBackend(){let t=localStorage.getItem("authToken");return t?(console.log("\u{1F4E5} Fetching cart from backend..."),this.setLoading(!0),this.http.get(`${this.API_BASE}/my`,{headers:{Authorization:`Bearer ${t}`}}).pipe(n(e=>{if(console.log("\u{1F4E6} Backend cart response:",e),this.setLoading(!1),e&&e.status)if(e.data&&Array.isArray(e.data)&&e.data.length>0){let o=e.data.map(a=>{let r="assets/no-image.png";return a.imageUrl&&(r=a.imageUrl.split("|")[0].trim()),{id:a.medicineId,name:a.productName,image:r,qty:a?.quantity?.toString()||"1",price:a.price,mrp:a.mrp||a.price,count:a.quantity||1,productType:a.productType}});console.log("\u2705 Processed backend cart items:",o),this._cart$.next(o)}else{console.log("\u2139\uFE0F Backend cart is empty"),this._cart$.next([]);let o=localStorage.getItem(this.LOCAL_STORAGE_KEY);o&&JSON.parse(o).length>0&&(console.log("\u26A0\uFE0F Local cart items still exist, sync might have failed"),console.log("\u{1F504} Loading local cart as fallback"),this.loadLocalCart())}else console.error("\u274C Invalid backend response format"),this._cart$.next([])}),n({error:e=>{console.error("\u274C Error fetching backend cart:",e),this.setLoading(!1),console.log("\u{1F504} Falling back to local cart due to backend error"),this.loadLocalCart()}}))):(console.log("\u274C No token for backend fetch"),s(null))}addItem(t,e=1){let o=localStorage.getItem("authToken"),a={id:t.id||t.productId,name:t.name,price:t.price,mrp:t.mrp,image:t.image||t.imageUrl,qty:t.form||t.packaging,count:e,productType:t.productType||"otc"};if(console.log("\u{1F6D2} Adding item to cart - Token exists:",!!o),!o)return this.addToLocalCart(a),this.notificationService.showSuccess(`${t.name} added to cart successfully!`),s(a);let r=t.id||t.productId;if(!r)return this.addToLocalCart(a),this.notificationService.showSuccess(`${t.name} added to cart successfully!`),s(a);this.setItemLoading(r,!0);let b={medicineId:r,quantity:e,productType:t.productType||"otc"};return this.http.post(`${this.API_BASE}/add`,b,{headers:{Authorization:`Bearer ${o}`}}).pipe(n({next:d=>{this.setItemLoading(r,!1),d&&d.status?(this.notificationService.showSuccess(`${t.name} added to cart successfully!`),setTimeout(()=>{this.fetchCartFromBackend().subscribe()},500)):(this.addToLocalCart(a),this.notificationService.showSuccess(`${t.name} added to cart successfully!`))},error:d=>{this.setItemLoading(r,!1),this.addToLocalCart(a),this.notificationService.showSuccess(`${t.name} added to cart successfully!`)}}))}removeItem(t){let e=localStorage.getItem("authToken");return console.log("\u{1F5D1}\uFE0F Removing item:",t),this.setItemLoading(t,!0),this.removeFromLocalCart(t),e?(console.log("\u{1F464} User logged in, removing from backend"),this.http.delete(`${this.API_BASE}/remove/${t}`,{headers:{Authorization:`Bearer ${e}`}}).pipe(n({next:()=>{this.setItemLoading(t,!1),console.log("\u2705 Backend remove successful"),this.showSuccessNotification("Item removed from cart"),this.fetchCartFromBackend().subscribe()},error:o=>{this.setItemLoading(t,!1),console.error("\u274C Backend remove failed:",o),this.showSuccessNotification("Item removed from cart")}}))):(console.log("\u{1F464} User not logged in, removed from local storage only"),this.setItemLoading(t,!1),this.showSuccessNotification("Item removed from cart"),s(null))}incrementQty(t){let e=localStorage.getItem("authToken");if(this.setItemLoading(t,!0),!e){let a=this._cart$.value.find(r=>r.id===t);return a&&this.updateLocalCartQuantity(t,a.count+1),this.setItemLoading(t,!1),s(null)}return this.http.put(`${this.API_BASE}/increment/${t}`,{},{headers:{Authorization:`Bearer ${e}`}}).pipe(n({next:()=>{this.setItemLoading(t,!1),this.fetchCartFromBackend().subscribe()},error:o=>{this.setItemLoading(t,!1),console.error("\u274C Increment failed:",o)}}))}decrementQty(t){let e=localStorage.getItem("authToken");if(this.setItemLoading(t,!0),!e){let a=this._cart$.value.find(r=>r.id===t);return a&&a.count>1?this.updateLocalCartQuantity(t,a.count-1):a&&a.count===1&&this.removeFromLocalCart(t),this.setItemLoading(t,!1),s(null)}return this.http.put(`${this.API_BASE}/decrement/${t}`,{},{headers:{Authorization:`Bearer ${e}`}}).pipe(n({next:()=>{this.setItemLoading(t,!1),this.fetchCartFromBackend().subscribe()},error:o=>{this.setItemLoading(t,!1),console.error("\u274C Decrement failed:",o)}}))}updateQty(t,e,o="otc"){let a=localStorage.getItem("authToken");return this.setItemLoading(t,!0),a?this.http.post(`${this.API_BASE}/update`,{medicineId:t,quantity:e,productType:o},{headers:{Authorization:`Bearer ${a}`}}).pipe(n({next:()=>{this.setItemLoading(t,!1),this.fetchCartFromBackend().subscribe()},error:r=>{this.setItemLoading(t,!1),console.error("\u274C Update quantity failed:",r)}})):(this.updateLocalCartQuantity(t,e),this.setItemLoading(t,!1),s(null))}clearCart(){let t=localStorage.getItem("authToken");return this.setLoading(!0),localStorage.removeItem(this.LOCAL_STORAGE_KEY),this._cart$.next([]),t?this.http.delete(`${this.API_BASE}/clear`,{headers:{Authorization:`Bearer ${t}`}}).pipe(n({next:()=>{this.setLoading(!1),this.showSuccessNotification("Cart cleared successfully!")},error:e=>{this.setLoading(!1),console.error("\u274C Clear cart failed:",e),this.showSuccessNotification("Cart cleared successfully!")}})):(console.log("\u{1F464} User not logged in, cleared local storage only"),this.setLoading(!1),this.showSuccessNotification("Cart cleared successfully!"),s(null))}fetchCart(){let t=localStorage.getItem("authToken");return console.log("\u{1F504} fetchCart called, logged in:",!!t),t?(console.log("\u{1F464} User logged in, fetching from backend"),this.fetchCartFromBackend()):(console.log("\u{1F464} User not logged in, using local cart"),this.loadLocalCart(),this.cart$)}isLoggedIn(){return!!localStorage.getItem("authToken")}getCurrentCart(){return this._cart$.value}getCartItemCount(){return this._cart$.value.reduce((t,e)=>t+e.count,0)}isItemInCart(t){return this._cart$.value.some(e=>e.id===t)}getItemById(t){return this._cart$.value.find(e=>e.id===t)}isLoading(){return this._loading$.value}isItemLoading(t){return this._itemLoadingStates$.value[t]||!1}getTotalCartValue(){return this._cart$.value.reduce((t,e)=>t+e.price*e.count,0)}getTotalSavings(){return this._cart$.value.reduce((t,e)=>e.mrp&&e.mrp>e.price?t+(e.mrp-e.price)*e.count:t,0)}syncLocalCartSmartMerge(t){let e=localStorage.getItem("authToken");return e?this.http.post(`${this.API_BASE}/sync-local-smart-merge`,t,{headers:{Authorization:`Bearer ${e}`}}):s({success:!1,message:"No authentication token"})}static \u0275fac=function(e){return new(e||i)};static \u0275prov=h({token:i,factory:i.\u0275fac,providedIn:"root"})};export{g as a,y as b};
